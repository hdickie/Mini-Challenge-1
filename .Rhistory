rank.sorted
plot(1:40,rank)
names(network)
names(network)[[23]]
names(network)[[22]]
which(rank.sorted == rank[[1]])
for ( i in 1:40 ) {
which(rank.sorted == rank[[i]])
}
for ( i in 1:40 ) {
print(which(rank.sorted == rank[[i]]))
}
for ( i in 1:40 ) {
print(which(rank == rank.sorted[[i]]))
}
for ( i in 1:40 ) {
print(which(rank.sorted[[i]] == rank))
print(which(rank == rank.sorted[[i]]))
print("---")
}
rank.ordinal <- rep(-1,40)
for ( i in 1:40 ) {
rank.ordinal[[i]] <- which(rank.sorted[[i]] == rank)
}
rank.ordinal <- rep(list(),40)
for ( i in 1:40 ) {
rank.ordinal[[i]] <- which(rank.sorted[[i]] == rank)
}
rank.ordinal
library(magrittr)
rank.ordinal %>% unlist()
rank.ordinal
for ( i in 1:40 ) {
rank.ordinal[[i]] <- which(rank.sorted[[i]] == rank)[[1]]
}
rank.ordinal
rank.ordinal %>% unlist()
for ( i in 1:40 ) {
rank.ordinal[[i]] <- which(rank.sorted[[i]] == rank)
}
rank.ordinal
rank.ordinal %>% unlist()
for ( i in 1:10 ) {
if (rank.ordinal[[i]] > 13){
rank.ordinal[[i]] <- rank.ordinal[[i]] + 1
} else if (rank.ordinal[[i]] > 21){
rank.ordinal[[i]] <- rank.ordinal[[i]] + 2
}
}
library(magrittr)
network <- read.csv("MC1_matrix.csv")
network <- network[,-1]
for (i in 1:40) {
for (j in i:40) {
network[[i]][[j]] <- network[[j]][[i]]
}
}
network.matrix <- as.matrix(network)
network.squared <- network.matrix%*%network.matrix
node.degrees <- diag(network.squared)
stochastic <- network
for (i in 1:40) {
stochastic[[i]] <- network[[i]]/node.degrees[[i]]
}
eigenpairs <- eigen(stochastic,TRUE)
rank <- eigenpairs[["vectors"]][,1]
#two most important nodes
rank.sorted <- sort(rank)
#sloppy code warning!!!
rank.ordinal <- rep(list(),40)
for ( i in 1:40 ) {
rank.ordinal[[i]] <- which(rank.sorted[[i]] == rank)[[1]]
}
rank.ordinal <- rank.ordinal %>% unlist()
#increment all ranks greated than 13 and again after 21 (which will be 22)
for ( i in 1:10 ) {
if (rank.ordinal[[i]] > 13){
rank.ordinal[[i]] <- rank.ordinal[[i]] + 1
} else if (rank.ordinal[[i]] > 21){
rank.ordinal[[i]] <- rank.ordinal[[i]] + 2
}
}
rank.ordinal
unique(rank.ordinal)
length(unique(rank.ordinal))
length(unique(rank))
sort(rank.ordinal)
for ( i in 1:40 ) {
rank.ordinal[[i]] <- which(rank.sorted[[i]] == rank)[[1]]
}
rank.ordinal <- rank.ordinal %>% unlist()
sort(rank.ordinal)
rankResults <- as.data.frame(cbind(rowNames,rank.ordinal))
View(rankResults)
rowNames
typeof(rowNames)
rowNames <- rowNames %>% as.character()
rankResults <- as.data.frame(cbind(rowNames,rank.ordinal))
View(rankResults)
View(rankResults[order(rank.ordinal),])
library(magrittr)
network <- read.csv("MC1_matrix.csv")
network <- network[,-1]
for (i in 1:40) {
for (j in i:40) {
network[[i]][[j]] <- network[[j]][[i]]
}
}
network.matrix <- as.matrix(network)
network.squared <- network.matrix%*%network.matrix
node.degrees <- diag(network.squared)
stochastic <- network
for (i in 1:40) {
stochastic[[i]] <- network[[i]]/node.degrees[[i]]
}
eigenpairs <- eigen(stochastic,TRUE)
rank <- eigenpairs[["vectors"]][,1]
#two most important nodes
rank.sorted <- sort(rank)
#sloppy code warning!!!
rank.ordinal <- rep(list(),40)
for ( i in 1:40 ) {
rank.ordinal[[i]] <- which(rank.sorted[[i]] == rank)[[1]]
}
rank.ordinal <- rank.ordinal %>% unlist() %>% reverse()
library(magrittr)
network <- read.csv("MC1_matrix.csv")
network <- network[,-1]
for (i in 1:40) {
for (j in i:40) {
network[[i]][[j]] <- network[[j]][[i]]
}
}
network.matrix <- as.matrix(network)
network.squared <- network.matrix%*%network.matrix
node.degrees <- diag(network.squared)
stochastic <- network
for (i in 1:40) {
stochastic[[i]] <- network[[i]]/node.degrees[[i]]
}
eigenpairs <- eigen(stochastic,TRUE)
rank <- eigenpairs[["vectors"]][,1]
#two most important nodes
rank.sorted <- sort(rank)
#sloppy code warning!!!
rank.ordinal <- rep(list(),40)
for ( i in 1:40 ) {
rank.ordinal[[i]] <- which(rank.sorted[[i]] == rank)[[1]]
}
rank.ordinal <- rank.ordinal %>% reverse() %>% unlist()
library(magrittr)
network <- read.csv("MC1_matrix.csv")
network <- network[,-1]
for (i in 1:40) {
for (j in i:40) {
network[[i]][[j]] <- network[[j]][[i]]
}
}
network.matrix <- as.matrix(network)
network.squared <- network.matrix%*%network.matrix
node.degrees <- diag(network.squared)
stochastic <- network
for (i in 1:40) {
stochastic[[i]] <- network[[i]]/node.degrees[[i]]
}
eigenpairs <- eigen(stochastic,TRUE)
rank <- eigenpairs[["vectors"]][,1]
#two most important nodes
rank.sorted <- sort(rank)
#sloppy code warning!!!
rank.ordinal <- rep(list(),40)
for ( i in 1:40 ) {
rank.ordinal[[i]] <- which(rank.sorted[[i]] == rank)[[1]]
}
rank.ordinal <- rank.ordinal %>% rev() %>% unlist()
rowNames <- rowNames %>% as.character()
rankResults <- as.data.frame(cbind(rowNames,rank.ordinal))
View(rankResults[order(rank.ordinal),])
library(magrittr)
network <- read.csv("MC1_matrix.csv")
network <- network[,-1]
for (i in 1:40) {
for (j in i:40) {
network[[i]][[j]] <- network[[j]][[i]]
}
}
network.matrix <- as.matrix(network)
network.squared <- network.matrix%*%network.matrix
node.degrees <- diag(network.squared)
stochastic <- network
for (i in 1:40) {
stochastic[[i]] <- network[[i]]/node.degrees[[i]]
}
eigenpairs <- eigen(stochastic,TRUE)
rank <- eigenpairs[["vectors"]][,1]
#two most important nodes
rank.sorted <- sort(rank)
#sloppy code warning!!!
rank.ordinal <- rep(list(),40)
for ( i in 1:40 ) {
rank.ordinal[[i]] <- which(rank.sorted[[i]] == rank)[[1]]
}
rank.ordinal <- rank.ordinal %>% rev() %>% unlist()
rowNames <- rowNames %>% as.character()
rankResults <- as.data.frame(cbind(rowNames,rank.ordinal))
rankResults <- rankResults[order(rank.ordinal),]
View(rankResults)
View(rankResults)
install.packages("iGraph")
library(iGraph)
install.packages("igraph")
library(igraph)
g <- from_adjacency_matrix(network,"undirected",diag = FALSE)
g <- graph_from_adjacency_matrix(network,"undirected",diag = FALSE)
g <- graph_from_adjacency_matrix(network.matrix,"undirected",diag = FALSE)
pagerank(g)
page_rank(g)
results <- sort(page_rank(g))
results <- sort(page_rank(g)[[1]])
results
results <- sort(page_rank(g)[[1]]) %>% rev()
results
plot(1:40,results)
plot(1:40,results)
results <- sort(page_rank(g)[[1]]) %>% rev()
plot(1:40,results)
plot(1:40,results)
library(magrittr)
network <- read.csv("MC1_matrix.csv")
network <- network[,-1]
for (i in 1:40) {
for (j in i:40) {
network[[i]][[j]] <- network[[j]][[i]]
}
}
network.matrix <- as.matrix(network)
#not used in the rest of the code
network.squared <- network.matrix%*%network.matrix
node.degrees <- diag(network.squared)
stochastic <- network
for (i in 1:40) {
stochastic[[i]] <- network[[i]]/node.degrees[[i]]
}
eigenpairs <- eigen(stochastic,TRUE)
View(rankResults)
library(igraph)
g <- graph_from_adjacency_matrix(network.matrix,"undirected",diag = FALSE)
page_rank(g)
results <- sort(page_rank(g)[[1]]) %>% rev()
plot(1:40,results)
page_rank(g)
results
plot(1:40,results)
setwd()
getwd()
setwd("C:/Users/Hume Dickie/Desktop/Github/Mini-Challenge-1/")
ls
data <- read.csv("Legakul Sensor Data.csv")
getwd()
data <- read.csv("Lekagul Sensor Data.csv")
setwd("C:/Users/Hume Dickie/Desktop/Github/Mini-Challenge-1")
sensor <- read.csv("Lekagul Sensor Data.csv")
View(sensor)
dim(data)
levels(data$gate.name)
dim(sensor)
plot(sensor$Timestamp)
sensor[1,1]
typeof(sensor[1,1])
sensor[1,1]
toString(sensor[1,1])
sensor[1,1]
timestamp.strings <- sensor[,1] %>% toString()
library(magrittr)
timestamp.strings <- sensor[,1] %>% toString()
timestamp.strings
timestamp.strings <- lapply(sensor[,1],toString)
timestamp.strings <- apply(sensor[,1],toString)
timestamp.strings <- lapply(list(sensor[,1]),toString)
timestamp.strings <- lapply(list(sensor[,1]),toString)
timestamp.strings
timestamp.strings <- sensor[,1]
timestamp.strings
typeof(sensor[,1])
timestamp.strings <- sensor[,1] %>% as.character()
timestamp.strings
timestamp.strings.split.space <- strsplit(timestamp.strings," ")
timestamp.strings.split.space
timestamp.strings.split.space[[1]]
timestamp.strings.split.space[[1]][[1]]
timestamp.strings.split.space[[1]][[2]]
dim(sensor)[1]
date.strings <- rep("",dim(sensor)[1])
date.split <- rep("",dim(sensor)[1])
for (i in 1:dim(sensor)[1]) {
date.split[[i]] <- timestamp.strings.split.space[[1]][[i]]
}
timestamp.strings.split.space
}timestamp.strings.split.space[[1]][[dim(sensor)[1]]]
timestamp.strings.split.space[[1]][[dim(sensor)[1]]]
timestamp.strings.split.space[[1]][[dim(sensor)[1] - 1]]
length(timestamp.strings.split.space)
dim(sensor)[1]
timestamp.strings.split.space[[17477]]
dim(desnor[1])
dim(sensor[1])
timestamp.strings.split.space[[171477]]
dim(sensor)[1]
timestamp.strings.split.space
timestamp.strings.split.space[[1]]
date.split <- rep("",dim(sensor)[1])
for (i in 1:dim(sensor)[1]) {
date.split[[i]] <- timestamp.strings.split.space[[i]][[1]]
}
plot(hist(date.split))
date.split
levels(date.split)
unique(date.split)
length(unique(date.split))
hist(date.split)
table(date.split)
plot(table(date.split))
barplot(table(date.split))
plot(table(date.split))
identify(date.split)
plot(table(date.split))
plot(table(date.split))
time.split <- rep("",dim(sensor)[1])
date.split <- rep("",dim(sensor)[1])
time.split <- rep("",dim(sensor)[1])
for (i in 1:dim(sensor)[1]) {
date.split[[i]] <- timestamp.strings.split.space[[i]][[1]]
time.split[[i]] <- timestamp.strings.split.space[[i]][[2]]
}
plot(table(time.split))
plot(table(time.split))
sorted.table <- sort(table(time.split))
sorted.table
sorted.time <- time.split %>% table() %>% sort() %>% rev()
sorted.time[[1]]
sorted.time[[2]]
sorted.time[[3]]
sorted.time[1:15]
sorted.time[1:10]
plot(table(time.split))
plot(sorted.time[10:])
plot(sorted.time[10:dim(sensor)[1]])
plot(table(sorted.time[10:dim(sensor)[1]]))
plot(sorted.time)
topTenTimes[[10]]
sorted.time[[11]]
sorted.time[[10]]
sorted.time[[20]]
plot(sorted.time[which(sorted.time < 10)])
plot(table(date.split)[which(table(date.split) < 10)])
plot(table(date.split)[which(table(date.split) > 10)])
plot(table(time.split)[which(table(time.split) > 10)])
plot(table(time.split)[which(table(time.split) < 10)])
timestamp <- sensor[,1]
timestamp
timestamp[[1]]
datetime <- as.POSIXlt(timestamp)
dateime[[1]]
datetime[[1]]
datetime[[1]][[1]]
timestamp <- sensor[,1]
t <- as.POSIXlt(timestamp)
t
timetamp[[1]]
timestamp[[1]]
t[[1]]
t <- as.POSIXct(timestamp)
t
t[[1]]
timestamp[[1]]
plot(t)
plot(table(t))
t[[1]]
summary(t[[1]])
names(t[[1]])
t[[1]]
typeof(t[[1]])
str(t[[1]])
unclass(t[[1]])
t[[1]]$sec
str(t[[1]])
unclass(str(t[[1]]))
unclass(t[[1]])
t <- as.POSIXt(timestamp)
t <- as.POSIXlt(timestamp)
t[[1]]
t <- as.POSIXct(timestamp)
t[[1]]
timestamp[[1]]
as.POSIXlt(timestamp[[1]])
tmp <- as.POSIXlt(timestamp[[1]])
names(tmp)
str(tmp)
tmp$sec
timestamp <- list(sensor[,1])
timestamp
t <- lapply(timestamp,as.POSIXlt)
t[[1]]
t[[1]][[1]]
t[[1]][[1]][[1]]
t[[1]][[1]][[80]]
View(t)
timestamp <- sensor[,1]
timestamp
rm(timestamp)
timestamp.raw <- sensor[,1]
timestamp <- rep(list(),dim(sensor)[1])
timestamp.raw <- sensor[,1]
timestamp <- rep(list(),dim(sensor)[1])
for (i in seq_along(timestamp.raw)) {
timestamp[[i]] <- as.POSIXlt(timestamp.raw[[1]])
}
timestamp.raw
timestamp.raw <- sensor[,1]
timestamp <- rep(list(),dim(sensor)[1])
for (i in seq_along(timestamp.raw)) {
print(i)
timestamp[[i]] <- as.POSIXlt(timestamp.raw[[1]])
}
dim(sensor)
plot(table(date.split))
plot(table(time.split))
sorted.time <- time.split %>% table() %>% sort() %>% rev()
timestamp.raw <- sensor[,1]
timestamp <- rep(list(),dim(sensor)[1])
for (i in seq_along(timestamp.raw)) {
if (i %% 1000 == 0) {
print(i/171)
}
timestamp[[i]] <- as.POSIXlt(timestamp.raw[[1]])
}
setwd("C:/Users/Hume Dickie/Desktop/Github/Mini-Challenge-1")
sensor <- read.csv("Lekagul Sensor Data.csv")
View(sensor)
timestamp.raw <- sensor[,1]
timestamp <- rep(list(),dim(sensor)[1])
for (i in seq_along(timestamp.raw)) {
if (i %% 1000 == 0) {
print(i/dim(sensor)[1])
}
timestamp[[i]] <- as.POSIXlt(timestamp.raw[[1]])
}
setwd("C:/Users/Hume Dickie/Desktop/Github/Mini-Challenge-1")
sensor <- read.csv("Lekagul Sensor Data.csv")
View(sensor)
timestamp.raw <- sensor[,1]
timestamp <- rep(list(),dim(sensor)[1])
for (i in seq_along(timestamp.raw)) {
if (i %% 10000 == 0) {
print(i/dim(sensor)[1])
}
timestamp[[i]] <- as.POSIXlt(timestamp.raw[[1]])
}
timestamp.strings <- sensor[,1] %>% as.character()
timestamp.strings.split.space <- strsplit(timestamp.strings," ")
date.split <- rep("",dim(sensor)[1])
time.split <- rep("",dim(sensor)[1])
for (i in 1:dim(sensor)[1]) {
date.split[[i]] <- timestamp.strings.split.space[[i]][[1]]
time.split[[i]] <- timestamp.strings.split.space[[i]][[2]]
}
plot(table(t))
timestamp[[1]]
timestamp[[1]]$sec
timestamp[[10000]]$sec
timestamp[[10002]]$sec
table(timestamp$sec)
timestamp
unlist(timestamp)
timestamp[1:10]
timestamp[1:3]
timestamp[20001:20003]
rm(list = ls())
setwd("C:/Users/Hume Dickie/Desktop/Github/Mini-Challenge-1")
sensor <- read.csv("Lekagul Sensor Data.csv")
View(sensor)
timestamp.raw <- sensor[,1]
timestamp <- rep(list(),dim(sensor)[1])
for (i in seq_along(timestamp.raw)) {
if (i %% 10000 == 0) {
print(i/dim(sensor)[1])
}
timestamp[[i]] <- as.POSIXlt(timestamp.raw[[i]])
}
timestamp.strings <- sensor[,1] %>% as.character()
timestamp.strings.split.space <- strsplit(timestamp.strings," ")
date.split <- rep("",dim(sensor)[1])
time.split <- rep("",dim(sensor)[1])
for (i in 1:dim(sensor)[1]) {
date.split[[i]] <- timestamp.strings.split.space[[i]][[1]]
time.split[[i]] <- timestamp.strings.split.space[[i]][[2]]
}
plot(table(t))
timestamp[1:3]
plot(table(timestamp))
plot(table(timestamp %>% unlist()))
plot(table(timestamp.raw))
plot(table(timestamp$sec))
plot(timestamp$sec)
plot(1:dim(sensor)[1],timestamp$sec)
dim(sensor)
unique(sensor$Timestamp)
sensor[1,"Timestamp"]
dim(sensor)
sensor[171477,"Timestamp"]
plot(table(time.split)[which(table(time.split) < 10)])
plot(table(date.split))
